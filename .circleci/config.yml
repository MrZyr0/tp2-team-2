# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  docker-publisher:
    environment:
      PROJECT_NAME: ynov-devops-tp2-team-2
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  test-api-code:
    docker:
      # specify the version you desire here
      - image: circleci/node:12.13.0

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # yarn install
      - run:
          name: Install Dependencies
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # ESLint & Prettier
      - run:
          name: ESLint & Prettier
          command: yarn eslint
  test-container-execution:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker # Ask circleci new Docker Engine to run outside of container
      - run:
          name: Up docker architecture (docker-compose)
          command: docker-compose -f ./Docker/docker-compose.dev.yml up --build --force-recreate --detach
      - run:
          name: Down docker architecture (docker-compose)
          command: docker-compose -f ./Docker/docker-compose.dev.yml down
  build-images:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker # Ask circleci new Docker Engine to build outside of container
      - run:
          name: Build Docker images (docker-compose)
          command: docker-compose -f ./Docker/docker-compose.prod.yml build --compress --force-rm --no-cache --pull --parallel # docker build -t $DOCKERHUB_USERNAME/${PROJECT_NAME}:latest .
      - run:
          name: Archive nodejs Docker image
          command: docker save -o ./${PROJECT_NAME}_nodejs.tar docker_nodejs
      - run:
          name: Archive nginx Docker image
          command: docker save -o ./${PROJECT_NAME}_nginx.tar docker_nginx
      - persist_to_workspace:
          root: .
          paths:
            - ./*.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived nodejs Docker image
          command: docker load -i /tmp/workspace/${PROJECT_NAME}_nodejs.tar
      - run:
          name: Load archived nginx Docker image
          command: docker load -i /tmp/workspace/${PROJECT_NAME}_nginx.tar
      - run:
          name: View RAW Docker images
          command: docker images
      - run:
          name: Rename nginx Docker image
          command: docker tag docker_nginx mrzyro/ynov-devops-tp2-team-2_nginx:latest
      - run:
          name: Rename nodejs Docker image
          command: docker tag docker_nodejs mrzyro/ynov-devops-tp2-team-2_nodejs:latest
      - run:
          name: Publish nodejs Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push mrzyro/ynov-devops-tp2-team-2_nodejs:latest
      - run:
          name: Publish nginx Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push mrzyro/ynov-devops-tp2-team-2_nginx:latest
workflows:
  version: 2
  build-master:
    jobs:
      - test-api-code:
          filters:
            branches:
              only: master
      - test-container-execution:
          requires:
            - test-api-code
          filters:
            branches:
              only: master
      - build-images:
          requires:
            - test-api-code #test-container-execution
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - build-images
          filters:
            branches:
              only: master